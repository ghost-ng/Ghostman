"""
Modernized REPL styling using StyleTemplates.

This module provides theme-aware HTML styling for REPL messages using the centralized
StyleTemplates system instead of manual CSS generation.
"""

def get_styled_html(html_content, base_color, style='ai', color_scheme=None):
    """
    Apply theme-aware styling to HTML content using StyleTemplates.
    
    Args:
        html_content: HTML to style
        base_color: Base color for the message
        style: 'ai', 'user', or 'input'
        color_scheme: Theme color scheme dict (for backwards compatibility)
        
    Returns:
        Styled HTML string
    """
    try:
        # Try to use StyleTemplates with current theme
        from ...ui.themes.theme_manager import get_theme_manager
        from ...ui.themes.style_templates import StyleTemplates
        
        theme_manager = get_theme_manager()
        if theme_manager and theme_manager.current_theme:
            # Use theme-aware styling
            return StyleTemplates.get_styled_html_content(
                theme_manager.current_theme, 
                html_content, 
                base_color, 
                style
            )
    except Exception as e:
        # Fall back to manual styling if StyleTemplates unavailable
        pass
        
    # Fallback implementation with hardcoded styles
    return _get_styled_html_fallback(html_content, base_color, style, color_scheme)


def _get_styled_html_fallback(html_content, base_color, style='ai', color_scheme=None):
    """
    Fallback implementation using manual CSS generation.
    
    This is used when StyleTemplates is not available or fails to load.
    """
    # Simple color variations using brightness adjustment
    style_colors = {
        'code': _adjust_brightness(base_color, 0.8),
        'em': _adjust_brightness(base_color, 1.1),
        'strong': _adjust_brightness(base_color, 1.2),
        'h1': _adjust_brightness(base_color, 1.3),
        'h2': _adjust_brightness(base_color, 1.25),
        'h3': _adjust_brightness(base_color, 1.2),
        'blockquote': _adjust_brightness(base_color, 0.7),
        'a': color_scheme.get('info', '#4A9EFF') if color_scheme else '#4A9EFF'
    }
    
    # Fixed fonts - Tahoma for text, Courier for code
    text_font = "font-family: 'Tahoma', 'Segoe UI', sans-serif; font-size: 10pt;"
    code_font = "font-family: 'Courier', 'Courier New', monospace; font-size: 9pt;"
    
    # Container class
    container_class = "ghostman-user-input" if style == 'input' else "ghostman-ai-response"
    
    # Wrap content with font
    text_with_font = f'<span style="{text_font}">{html_content}</span>'
    
    # Create styled HTML
    styled_html = f'<div class="{container_class}" style="color: {base_color}; line-height: 1.4;">{text_with_font}</div>'
    
    # Apply styling to specific elements
    replacements = {
        '<code>': f'<code style="{code_font}background-color: rgba(255,255,255,0.1); padding: 2px 4px; border-radius: 3px; color: {style_colors["code"]};">',
        '<pre>': f'<pre style="{code_font}background-color: rgba(255,255,255,0.05); padding: 8px; border-radius: 4px; border-left: 3px solid {base_color}; margin: 4px 0; overflow-x: auto;">',
        '<em>': f'<em style="color: {style_colors["em"]}; font-style: italic;">',
        '<strong>': f'<strong style="color: {style_colors["strong"]}; font-weight: bold;">',
        '<h1>': f'<h1 style="color: {style_colors["h1"]}; font-size: 1.4em; margin: 8px 0 4px 0; border-bottom: 2px solid {base_color};">',
        '<h2>': f'<h2 style="color: {style_colors["h2"]}; font-size: 1.3em; margin: 6px 0 3px 0; border-bottom: 1px solid {base_color};">',
        '<h3>': f'<h3 style="color: {style_colors["h3"]}; font-size: 1.2em; margin: 4px 0 2px 0;">',
        '<blockquote>': f'<blockquote style="color: {style_colors["blockquote"]}; border-left: 3px solid {base_color}; padding-left: 12px; margin: 4px 0; font-style: italic;">',
        '<ul>': '<ul style="margin: 4px 0; padding-left: 20px;">',
        '<ol>': '<ol style="margin: 4px 0; padding-left: 20px;">',
        '<li>': '<li style="margin: 2px 0;">',
    }
    
    for old, new in replacements.items():
        styled_html = styled_html.replace(old, new)
    
    # Handle links
    import re
    styled_html = re.sub(
        r'<a href="([^"]+)"([^>]*)>',
        f'<a href="\\1" style="color: {style_colors["a"]}; text-decoration: underline;"\\2>',
        styled_html
    )
    
    return styled_html


def _adjust_brightness(hex_color, factor):
    """
    Adjust brightness of a hex color.
    
    This function is kept for backwards compatibility with the fallback implementation.
    For new code, use StyleTemplates.adjust_color_brightness instead.
    """
    try:
        from ...ui.themes.style_templates import StyleTemplates
        return StyleTemplates.adjust_color_brightness(hex_color, factor)
    except:
        # Fallback manual implementation
        try:
            # Remove # if present
            hex_color = hex_color.lstrip('#')
            
            # Convert to RGB
            r = int(hex_color[0:2], 16)
            g = int(hex_color[2:4], 16)
            b = int(hex_color[4:6], 16)
            
            # Adjust brightness
            r = min(255, int(r * factor))
            g = min(255, int(g * factor))
            b = min(255, int(b * factor))
            
            # Convert back to hex
            return f'#{r:02x}{g:02x}{b:02x}'
        except:
            return hex_color